name: Auto-merge Bot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.type == 'Bot'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug PR Information
        id: debug-info
        run: |
          BOT_LOGIN="${{ github.event.pull_request.user.login }}"
          BOT_TYPE="${{ github.event.pull_request.user.type }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          BRANCH="${{ github.event.pull_request.head.ref }}"
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          PR_LABELS="${{ github.event.pull_request.labels.*.name }}"

          echo "ü§ñ PR Information:"
          echo "  ‚Ä¢ PR Number: $PR_NUMBER"
          echo "  ‚Ä¢ PR Title: $PR_TITLE"
          echo "  ‚Ä¢ Bot Login: $BOT_LOGIN"
          echo "  ‚Ä¢ User Type: $BOT_TYPE"
          echo "  ‚Ä¢ Branch: $BRANCH -> $BASE_BRANCH"
          echo "  ‚Ä¢ Labels: $PR_LABELS"

          # Check if Dependabot PR
          if [[ "$BOT_LOGIN" == "dependabot[bot]" ]]; then
            echo "is_dependabot=true" >> $GITHUB_OUTPUT
            echo "dependabot=true" >> $GITHUB_OUTPUT
          else
            echo "is_dependabot=false" >> $GITHUB_OUTPUT
          fi

          # Check if has auto-merge label
          if [[ "$PR_LABELS" == *"auto-merge"* ]] || [[ "$PR_LABELS" == *"dependencies"* ]]; then
            echo "has_auto_merge_label=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Auto-merge label detected"
          else
            echo "has_auto_merge_label=false" >> $GITHUB_OUTPUT
          fi

          # Check if trusted bot
          if [[ "$BOT_LOGIN" == "dependabot[bot]" ]] || \
             [[ "$BOT_LOGIN" == "renovate[bot]" ]] || \
             [[ "$BOT_LOGIN" == "github-actions[bot]" ]] || \
             [[ "$BOT_LOGIN" == "merge[bot]" ]]; then
            echo "is_trusted=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Trusted bot detected: $BOT_LOGIN"
          else
            echo "is_trusted=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Untrusted bot: $BOT_LOGIN"
          fi

      - name: Get Dependabot metadata
        id: dependabot-metadata
        if: steps.debug-info.outputs.is_dependabot == 'true'
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Determine if auto-merge should proceed
        id: auto-merge-decision
        run: |
          BOT_LOGIN="${{ github.event.pull_request.user.login }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          HAS_AUTO_MERGE_LABEL="${{ steps.debug-info.outputs.has_auto_merge_label }}"

          # Default to not auto-merge
          SHOULD_MERGE="false"
          REASON=""

          # If PR has auto-merge label, auto-merge regardless of bot type
          if [[ "$HAS_AUTO_MERGE_LABEL" == "true" ]]; then
            SHOULD_MERGE="true"
            REASON="Auto-merge label"
          # Dependabot-specific logic
          elif [[ "$BOT_LOGIN" == "dependabot[bot]" ]]; then
            UPDATE_TYPE="${{ steps.dependabot-metadata.outputs.update-type }}"

            # Auto-merge security updates immediately
            if [[ "$PR_TITLE" == *"security"* ]] || [[ "$PR_TITLE" == *"Security"* ]]; then
              SHOULD_MERGE="true"
              REASON="Security update"
            # Auto-merge patch and minor updates
            elif [[ "$UPDATE_TYPE" == "version-update:semver-patch" ]] || \
                 [[ "$UPDATE_TYPE" == "version-update:semver-minor" ]]; then
              SHOULD_MERGE="true"
              REASON="$UPDATE_TYPE"
            else
              REASON="Major version update or other type"
            fi
          # Other trusted bots - auto-merge all
          elif [[ "$BOT_LOGIN" == "renovate[bot]" ]] || \
               [[ "$BOT_LOGIN" == "github-actions[bot]" ]] || \
               [[ "$BOT_LOGIN" == "merge[bot]" ]]; then
            SHOULD_MERGE="true"
            REASON="Trusted bot"
          fi

          echo "should_merge=$SHOULD_MERGE" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT
          echo "üîÑ Auto-merge decision: $SHOULD_MERGE ($REASON)"

      - name: Wait for checks to complete
        if: steps.auto-merge-decision.outputs.should_merge == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number: pull_number } = context.issue;
            const maxWaitTime = 10 * 60 * 1000; // 10 minutes
            const checkInterval = 15000; // 15 seconds
            const maxAttempts = maxWaitTime / checkInterval;
            let attempts = 0;

            console.log(`üîç Waiting for checks on PR #${pull_number}...`);

            while (attempts < maxAttempts) {
              attempts++;

              try {
                // Get combined status for the PR
                const { data: combinedStatus } = await github.rest.repos.getCombinedStatusForRef({
                  owner,
                  repo,
                  ref: context.payload.pull_request.head.sha,
                });

                console.log(`üìä Status check: ${combinedStatus.state}`);
                console.log(`üìã Total statuses: ${combinedStatus.statuses.length}`);

                // Log individual status checks
                combinedStatus.statuses.forEach(status => {
                  console.log(`  ‚Ä¢ ${status.context}: ${status.state}`);
                });

                if (combinedStatus.state === 'success') {
                  console.log('‚úÖ All status checks passed!');
                  return;
                } else if (combinedStatus.state === 'failure') {
                  console.log('‚ùå Some status checks failed');
                  core.setFailed('Status checks failed');
                  return;
                }

                // Also check for GitHub Actions (checks) specifically
                const { data: checks } = await github.rest.checks.listForRef({
                  owner,
                  repo,
                  ref: context.payload.pull_request.head.sha,
                });

                const allChecksCompleted = checks.check_runs.every(check =>
                  check.status === 'completed'
                );

                const allChecksSuccessful = checks.check_runs.every(check =>
                  check.conclusion === 'success' || check.conclusion === 'neutral'
                );

                console.log(`üîç GitHub Actions checks: ${checks.check_runs.length} total`);

                if (allChecksCompleted) {
                  if (allChecksSuccessful) {
                    console.log('‚úÖ All GitHub Actions checks passed!');
                    return;
                  } else {
                    console.log('‚ùå Some GitHub Actions checks failed');
                    core.setFailed('GitHub Actions checks failed');
                    return;
                  }
                }

              } catch (error) {
                console.log(`‚ö†Ô∏è  Error checking status: ${error.message}`);
              }

              console.log(`‚è≥ Waiting... (attempt ${attempts}/${maxAttempts})`);
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }

            console.log('‚è∞ Timeout waiting for status checks');
            core.setFailed('Timeout waiting for status checks');

      - name: Approve and enable auto-merge
        if: steps.auto-merge-decision.outputs.should_merge == 'true'
        uses: peter-evans/enable-pull-request-automerge@v4
        with:
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Approve PR (fallback)
        if: steps.auto-merge-decision.outputs.should_merge == 'true' && failure()
        run: |
          gh pr review --approve "${{ github.event.pull_request.html_url }}"
          echo "‚úÖ PR approved (fallback)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on auto-merge
        if: steps.auto-merge-decision.outputs.should_merge == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number: pull_number } = context.issue;
            const reason = "${{ steps.auto-merge-decision.outputs.reason }}";

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `ü§ñ This PR has been automatically approved and enabled for auto-merge.

**Reason:** ${reason}
**Bot:** ${{ github.event.pull_request.user.login }}
**PR:** #${{ github.event.pull_request.number }}`
            });