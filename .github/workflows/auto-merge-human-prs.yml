name: Auto-merge Human PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login != 'dependabot[bot]'

    steps:
      - name: Wait for checks to complete
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number: pull_number } = context.issue;
            const maxWaitTime = 15 * 60 * 1000; // 15 minutes
            const checkInterval = 30000; // 30 seconds
            let attempts = 0;

            console.log(`üîç Waiting for checks on PR #${pull_number}...`);

            while (attempts < maxWaitTime / checkInterval) {
              attempts++;

              try {
                // Get combined status for the PR
                const { data: combinedStatus } = await github.rest.repos.getCombinedStatusForRef({
                  owner,
                  repo,
                  ref: context.payload.pull_request.head.sha,
                });

                console.log(`üìä Status check: ${combinedStatus.state}`);

                if (combinedStatus.state === 'success') {
                  console.log('‚úÖ All checks passed!');
                  return;
                } else if (combinedStatus.state === 'failure') {
                  console.log('‚ùå Some checks failed');
                  core.setFailed('Status checks failed');
                  return;
                }
              } catch (error) {
                console.log(`‚ö†Ô∏è  Error checking status: ${error.message}`);
              }

              console.log(`‚è≥ Waiting... (attempt ${attempts})`);
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }

            console.log('‚è∞ Timeout waiting for status checks');
            core.setFailed('Timeout waiting for status checks');

      - name: Check PR requirements
        id: check-pr
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number: pull_number } = context.issue;

            try {
              // Get PR details
              const { data: pr } = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: pull_number
              });

              // Check if PR has merge conflicts
              if (pr.mergeable === false || pr.mergeable_state === 'dirty') {
                console.log('‚ùå PR has merge conflicts');
                core.setOutput('can-merge', 'false');
                core.setOutput('reason', 'merge-conflicts');
                return;
              }

              // Check if PR is draft
              if (pr.draft) {
                console.log('‚ùå PR is in draft state');
                core.setOutput('can-merge', 'false');
                core.setOutput('reason', 'draft-pr');
                return;
              }

              // Check for required labels (optional)
              const requiredLabels = ['ready-for-merge', 'automerge'];
              const hasRequiredLabel = pr.labels.some(label => requiredLabels.includes(label.name.toLowerCase()));

              if (!hasRequiredLabel) {
                console.log('‚ö†Ô∏è  PR missing required labels (ready-for-merge or automerge)');
                core.setOutput('can-merge', 'false');
                core.setOutput('reason', 'missing-labels');
                return;
              }

              // Check for blocking labels
              const blockingLabels = ['do-not-merge', 'work-in-progress', 'wip'];
              const hasBlockingLabel = pr.labels.some(label => blockingLabels.includes(label.name.toLowerCase()));

              if (hasBlockingLabel) {
                console.log('‚ùå PR has blocking labels');
                core.setOutput('can-merge', 'false');
                core.setOutput('reason', 'blocking-labels');
                return;
              }

              console.log('‚úÖ PR meets all requirements for auto-merge');
              core.setOutput('can-merge', 'true');
              core.setOutput('reason', '');

            } catch (error) {
              console.error(`‚ùå Error checking PR: ${error.message}`);
              core.setOutput('can-merge', 'false');
              core.setOutput('reason', 'error');
            }

      - name: Auto-merge PR
        if: steps.check-pr.outputs.can-merge == 'true'
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          echo "üîÑ Auto-merging PR #$PR_NUMBER"

          # Approve the PR
          gh pr review --approve "$PR_URL"

          # Enable auto-merge with squash
          gh pr merge --auto --squash "$PR_URL"

          echo "‚úÖ Auto-merge enabled for PR #$PR_NUMBER"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on auto-merge
        if: steps.check-pr.outputs.can-merge == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number: pull_number } = context.issue;
            const prAuthor = context.payload.pull_request.user.login;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `ü§ñ **Auto-merge Enabled**\n\nThis PR has been automatically approved and enabled for auto-merge since all checks passed and requirements are met.\n\n**PR:** #${pull_number}\n**Author:** @${prAuthor}\n**Status:** All checks passed ‚úÖ\n**Merge Method:** Squash\n\nThe PR will be automatically merged once any branch protection rules are satisfied.`
            });

      - name: Comment on requirements not met
        if: steps.check-pr.outputs.can-merge == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number: pull_number } = context.issue;
            const reason = '${{ steps.check-pr.outputs.reason }}';
            const prAuthor = context.payload.pull_request.user.login;

            let message = `ü§ñ **Auto-merge Requirements Not Met**\n\nThis PR cannot be automatically merged for the following reason:\n\n**Reason:** ${reason}\n**PR:** #${pull_number}\n**Author:** @${prAuthor}`;

            if (reason === 'missing-labels') {
              message += `\n\n**To enable auto-merge:**\n1. Add one of these labels: \`ready-for-merge\` or \`automerge\`\n2. Ensure no blocking labels are present (like \`do-not-merge\` or \`wip\`)\n3. All status checks must pass`;
            } else if (reason === 'merge-conflicts') {
              message += `\n\n**To resolve:**\n1. Resolve merge conflicts locally\n2. Push the resolved changes to the PR branch\n3. Ensure all status checks pass`;
            } else if (reason === 'draft-pr') {
              message += `\n\n**To resolve:**\n1. Mark the PR as "Ready for review"\n2. Ensure all status checks pass`;
            }

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: message
            });