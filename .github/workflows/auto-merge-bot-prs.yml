name: Auto-merge Bot PRs

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.type == 'Bot'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if PR is from trusted bot
        id: check-bot
        run: |
          BOT_LOGIN="${{ github.event.pull_request.user.login }}"
          BOT_TYPE="${{ github.event.pull_request.user.type }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          echo "ü§ñ PR Information:"
          echo "  ‚Ä¢ PR Number: $PR_NUMBER"
          echo "  ‚Ä¢ PR Title: $PR_TITLE"
          echo "  ‚Ä¢ Bot Login: $BOT_LOGIN"
          echo "  ‚Ä¢ User Type: $BOT_TYPE"
          echo "  ‚Ä¢ Head SHA: $HEAD_SHA"

          # List of trusted bots
          if [[ "$BOT_LOGIN" == "dependabot[bot]" ]] || \
             [[ "$BOT_LOGIN" == "renovate[bot]" ]] || \
             [[ "$BOT_LOGIN" == "github-actions[bot]" ]] || \
             [[ "$BOT_LOGIN" == "merge[bot]" ]]; then
            echo "is_trusted=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Trusted bot detected: $BOT_LOGIN"
          else
            echo "is_trusted=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Untrusted bot: $BOT_LOGIN"
            echo "  ‚Ä¢ Available bot users: dependabot[bot], renovate[bot], github-actions[bot], merge[bot]"
          fi

      - name: Wait for checks to complete
        if: steps.check-bot.outputs.is_trusted == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number: pull_number } = context.issue;
            const maxWaitTime = 10 * 60 * 1000; // 10 minutes
            const checkInterval = 15000; // 15 seconds
            const maxAttempts = maxWaitTime / checkInterval;
            let attempts = 0;

            console.log(`üîç Waiting for checks on PR #${pull_number}...`);

            while (attempts < maxAttempts) {
              attempts++;

              try {
                // Get combined status for the PR
                const { data: combinedStatus } = await github.rest.repos.getCombinedStatusForRef({
                  owner,
                  repo,
                  ref: context.payload.pull_request.head.sha,
                });

                console.log(`üìä Status check: ${combinedStatus.state}`);
                console.log(`üìã Total statuses: ${combinedStatus.statuses.length}`);

                // Log individual status checks
                combinedStatus.statuses.forEach(status => {
                  console.log(`  ‚Ä¢ ${status.context}: ${status.state}`);
                });

                if (combinedStatus.state === 'success') {
                  console.log('‚úÖ All status checks passed!');
                  return;
                } else if (combinedStatus.state === 'failure') {
                  console.log('‚ùå Some status checks failed');
                  core.setFailed('Status checks failed');
                  return;
                }

                // Also check for GitHub Actions (checks) specifically
                const { data: checks } = await github.rest.checks.listForRef({
                  owner,
                  repo,
                  ref: context.payload.pull_request.head.sha,
                });

                const allChecksCompleted = checks.check_runs.every(check =>
                  check.status === 'completed'
                );

                const allChecksSuccessful = checks.check_runs.every(check =>
                  check.conclusion === 'success' || check.conclusion === 'neutral'
                );

                console.log(`üîç GitHub Actions checks: ${checks.check_runs.length} total`);

                if (allChecksCompleted) {
                  if (allChecksSuccessful) {
                    console.log('‚úÖ All GitHub Actions checks passed!');
                    return;
                  } else {
                    console.log('‚ùå Some GitHub Actions checks failed');
                    core.setFailed('GitHub Actions checks failed');
                    return;
                  }
                }

              } catch (error) {
                console.log(`‚ö†Ô∏è  Error checking status: ${error.message}`);
              }

              console.log(`‚è≥ Waiting... (attempt ${attempts}/${maxAttempts})`);
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }

            console.log('‚è∞ Timeout waiting for status checks');
            core.setFailed('Timeout waiting for status checks');

      - name: Approve and auto-merge
        if: steps.check-bot.outputs.is_trusted == 'true'
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"

          # Approve the PR
          gh pr review --approve "$PR_URL"
          echo "‚úÖ PR approved"

          # Enable auto-merge
          gh pr merge --auto --squash "$PR_URL"
          echo "‚úÖ Auto-merge enabled"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on auto-merge
        if: steps.check-bot.outputs.is_trusted == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number: pull_number } = context.issue;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: 'ü§ñ This PR from a trusted bot has been automatically approved and merged.'
            });